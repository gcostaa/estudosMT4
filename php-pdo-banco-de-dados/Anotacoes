- PDO PHP DATA OBJECT

* Interface leve e consistente para acessar banco de dados em PHP
* Utiliza drivers especifico para da banco de dados

PDO Possui drivers a estes objetos:
https://www.php.net/manual/pt_BR/pdo.drivers.php

* PDO é uma interface para acessarmos diversos banco de dados

::exec

o exec irá retornar a quantidade de linha afetada pela query executada
https://www.php.net/manual/pt_BR/pdo.exec.php

::query

Executa uma instrução, retornando como PDOStatement
PDOStatement -> possui o método fetchall que irá retornar todas as linhas

https://www.php.net/manual/pt_BR/class.pdostatement.php
https://www.php.net/manual/pt_BR/pdostatement.fetchall.php

O QUE É IMPORTANTE ENTENDER SOBR EOS FETCH:

Eles basicamente dentro de um laço de repetição, criam um ponteiro
para próxima linha, sem a necessidade de criar um contator, por exemplo.

O fetchall irá retornar o array onde cada indice se trata de um registro
na base e dentro de cada indice haverá um outro array onde é possível acessar
o elemento tando pelo indice numerico ou nome.

$result = $statement->fetchAll();

array(6) {
  ["id"]=>
  int(1)
  [0]=>
  int(1)
  ["name"]=>
  string(7) "Gustavo"
  [1]=>
  string(7) "Gustavo"
  ["birth_date"]=>
  string(10) "1999-06-05"
  [2]=>
  string(10) "1999-06-05"
}

Exemplo: [0]['nome'] ouuuu [0][0]

Todavia é possível alterar a forma de exibição do fetchall através da parâmetrização do método
disponível em:

https://www.php.net/manual/en/pdostatement.fetch.php

Como podemos ver o parâmetro PDO::FETCH_ASSOC irá fazer com que o nome do indice
seja o mesmo nome da coluna, conforme abaixo

$result = $statement->fetchAll(PDO::FETCH_ASSOC);

array(1) {
  [0]=>
  array(3) {
    ["id"]=>
    int(1)
    ["name"]=>
    string(7) "Gustavo"
    ["birth_date"]=>
    string(10) "1999-06-05"
  }
}


Também existe o FETCH_CLASS. Basicamente ele irá esperar um argumento que deve ser uma classe, onde
caso os atributos da classe TENHA OS MESMOS NOMES de atributos da tabela, ele irá instanciar um objeto
já com os dados configurados.

Quando você deseja obter apenas uma linha, você pode usar o "fetch" ao invés do fetchall

FETCH

//O FeTCH irá obter apenas uma linha
/*Enquanto os dados do estudando for verdadeiro, ou seja, o statement retorna dados
é instanciado um novo e exibida sua idade
*/
while ($studentData = $statement->fetch(PDO::FETCH_ASSOC)){

    $student = new Student(
        $studentData['id'],
        $studentData['name'],
        new DateTimeImmutable($studentData['birth_date'])
    );

    echo $student->age() . PHP_EOL;
}

fetchColumn

O fetchColumn irá obter apenas uma coluna e retornar seu valor

$statement = $pdo->query('SELECT * FROM students');

var_dump($statement->fetchColumn(1));exit();

Saida:

Gustavo

PREPARE

O prepare irá "preparar" a query antes de sua execução no banco de dados. O prepare
do PHP poderá escapar caracteres incorretos ou até mesmo tentativas de SQL INJECTIONS.

bindValue

$sqlInsert = "INSERT INTO students (name, birth_date) VALUES (?,?);";

Após usar "?" você deve usar o bindvalue para injetar o valor desejado (TANTO NO INSERT QUANTO SELECT E AFINS)

$statement->bindValue(1, $student->name());
$statement->bindValue(2, $student->birthDate()->format('Y-m-d'));

Também podemos usar ":name" como parâmetros no bindValue:

$sqlInsert = "INSERT INTO students (name, birth_date) VALUES (:name,:niver);";
$statement = $pdo->prepare($sqlInsert);
$statement->bindValue(':name', $student->name());
$statement->bindValue(':niver', $student->birthDate()->format('Y-m-d'));

execute

O execute irá pegar o statement preparado e com os valores configurados e executar, retornando
um verdadeiro ou falso

bindParam

Passa o valor por referência

bindParam x bindValue

Um passo o valor por refência e outro gerá uma cópia (passa o valor)

DIFERENÇA ENTRE O EXECUTE E O QUERY

O query do statement executa a instrução SQL porém sem trata-la, voce precisaria tratar ela na mão.
Já o execute recebe um prepared statement, já tratado


