Composer:

O que é o composer?

O composer é um gerenciador de dependências. Ele não é como o yam ou apt do linux que instala no sistema operacional. O composer faz o download dessa dependência no escopo do projeto, por exemplo.

Comando composer init usado para inicializar o composer.json, arquivo que irá conter as dependências do projeto e as configurações de autoload.


Ondes o composer faz as buscas?

Por padrão o composer busca em https://packagist.org/. Ele é o repositório central. PORÉM É IMPORTANTE RESSALTAR QUE ELE
NÃO É O ÚNICO, É POSSÍVEL OBTER O PACOTE ATRAVÉS DE OUTRAS ORIGENS.


INICIANDO O PROJETO

- Inicialmente no projeto, identificamos que devido a necessidade de realizar uma requisição a um site
http e ler o DOM do site, precisariamos de duas dependências, uma para realizar a requisição e outra
para ler o elemento DOM do site.

Sendo assim buscamos elas em: https://packagist.org/.

Com isso localizamos https://packagist.org/packages/guzzlehttp/guzzle e https://packagist.org/packages/symfony/dom-crawler

- Instalando o guzzle

Executamos o comando "composer require guzzlehttp/guzzle" e o composer dentro da pasta vendor irá instalar
todo o back do do guzzle e também suas dependencias.

O comando composer install irá verificar o arquivo de composer.json e adicionar as novas dependências inseridas manualmente em “require”.

O comando composer update irá atualizar as dependências.

Exemplo:

Instalamos uma versão do pacote 4.2

 "require": {
        "guzzlehttp/guzzle": "^7.3",
        "symfony/dom-crawler":"^4.2"
    }

Porém, precisamos rodar o composer install pra de fato add ele ao projeto e depois o update para atualizar o pacote

- PSR4

https://www.php-fig.org/psr/psr-4/

A PSR4 é regular como o autoload de classes internas do projetos é realizada

Basicamente existe um namespace raiz ou VENDOR NAMESPACE "Ex Alura\Projeto" onde definimos que
este namespace raiz será apontado para a pasta /src do projeto. Logo a Classe
"Usuario" terá o namespace Alura\Projeto\Usuario e estará na pasta /src/Usuario
do projeto.

Importante que o nome da classe senha o mesmo nome do namespace


"autoload": {
        "psr-4": {
            "Alura\\BuscadorDeCursos\\": "src/"
        }
    }

Vendor Namespace -> Alura\\BuscadorDeCursos\\

Além disto, o "autoload" possui a chave "classmap" para mapear classes que
não implementam o ps4 e a chave "files" para por exemplo mapear arquivos .php
de funções



- Usando ferramentas que não vão para produção

Nem toda dependencia deve ir para produção. Por exemplo, o phpunit, framework para testes. Faz sentido
ele ir para prod, não. Dessa forma é possível executar o comando abaixo para que o composer instale
a dependencia apenas para ambiente de desenvolvimento.

composer require --dev phpunit/phpunit ^10

"require-dev": {
        "phpunit/phpunit": "^10"
    }

Para instalar em um ambiente limpo apenas dependências de prod, basta:

composer require --no-dev

- Ferramentas instaladas pelo composer

O composer armazena os executaveis de ferramentas em vendor/bin. O phpunit por ser uma ferramenta,
possui um executavel neste diretorio

- Ferramenta que válida se o código está dentro dos padrões de determinada FSR:

https://github.com/squizlabs/PHP_CodeSniffer

- Ferramenta que válida se O CÓDIGO ESTÁ CORRETO EM QUESTÃO DE INTERPRETAÇÃO:

https://github.com/phan/phan
